<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="hlEdit.Text" xml:space="preserve">
    <value>improve description</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Tag Info</value>
  </data>
  <data name="hlHistory.Text" xml:space="preserve">
    <value>history</value>
  </data>
  <data name="hlAbout.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="hlSynonym.Text" xml:space="preserve">
    <value>Synonyms</value>
  </data>
  <data name="Remapped.Text" xml:space="preserve">
    <value>The following tags will be remapped:</value>
  </data>
  <data name="SynonymDescription.Text" xml:space="preserve">
    <value>Incorrectly tagged questions are hard to find and answer. If you know of common, alternate spellings or phrasings for this tag, add them here so we can automatically correct them in the future. For example, suggest “bike” as a synonym for bicycle, or “sock” for socks.</value>
  </data>
  <data name="cmdSuggest.Text" xml:space="preserve">
    <value>Suggest</value>
  </data>
  <data name="NoSynonyms.Text" xml:space="preserve">
    <value>There are currently no synonyms for this tag.</value>
  </data>
  <data name="AlreadyMaster.Text" xml:space="preserve">
    <value>This term is already assigned as a synonym for another term.</value>
  </data>
  <data name="AlreadyRelated.Text" xml:space="preserve">
    <value>This term is already a synonym for another term.</value>
  </data>
  <data name="SuggestASynonym.Text" xml:space="preserve">
    <value>Suggest a synonym:</value>
  </data>
  <data name="SuggestedSynonyms.Text" xml:space="preserve">
    <value>Suggested Synonyms:</value>
  </data>
  <data name="OneTerm.Text" xml:space="preserve">
    <value>You must suggest provide a single term suggestion. </value>
  </data>
  <data name="DeleteSynonym.Text" xml:space="preserve">
    <value>Delete Suggested Synonym</value>
  </data>
  <data name="SameRelationSuggested.Text" xml:space="preserve">
    <value>This term has previously been suggested as a synonym. Now it is either a recommended synonym, a currently suggested synonym, or it was already downvoted enough times to no longer be displayed under suggested synonyms. </value>
  </data>
  <data name="MultipleTerms.Text" xml:space="preserve">
    <value>You may only suggest a single term at a time.</value>
  </data>
  <data name="DetailMetaTitle.Text" xml:space="preserve">
    <value>The [0] Tag</value>
  </data>
  <data name="SynonymMetaTitle.Text" xml:space="preserve">
    <value>Synonym's for the [0] Tag</value>
  </data>
  <data name="SynonymMetaDescription.Text" xml:space="preserve">
    <value>Synonyms associated with the tag [0]</value>
  </data>
</root>