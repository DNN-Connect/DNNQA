/************************************************************/
/*****    TestDrivenDNNModule Database Dependencies     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/** Check for pre-existing tables, and remove them **/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}YourCompany_TestDrivenDNNModule]') and OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        ALTER TABLE {databaseOwner}[{objectQualifier}YourCompany_TestDrivenDNNModule] DROP CONSTRAINT [FK_{objectQualifier}YourCompany_TestDrivenDNNModule_{objectQualifier}Modules]

        ALTER TABLE {databaseOwner}[{objectQualifier}YourCompany_TestDrivenDNNModule] DROP CONSTRAINT [PK_{objectQualifier}YourCompany_TestDrivenDNNModule]

        DROP INDEX {databaseOwner}[{objectQualifier}YourCompany_TestDrivenDNNModule].[IX_{objectQualifier}YourCompany_TestDrivenDNNModule]

        DROP TABLE {databaseOwner}[{objectQualifier}YourCompany_TestDrivenDNNModule]
    END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Modules]') and OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        DROP TABLE {databaseOwner}[{objectQualifier}Modules]

        DROP TABLE {databaseOwner}[{objectQualifier}Users]
    END
GO

/**-------------------------------------------------------**/

/** Create "Mock" DotNetNuke Tables **/

if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Modules]') and OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        CREATE TABLE {databaseOwner}[{objectQualifier}Modules]
        (
            [ModuleID] [int] NOT NULL
        )

        ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD CONSTRAINT [PK_{objectQualifier}Modules] PRIMARY KEY CLUSTERED  ([ModuleID])
    END
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Users]') and OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        CREATE TABLE {databaseOwner}[{objectQualifier}Users]
        (
            [UserID] [int] NOT NULL,
            [FirstName] [nvarchar](50) NOT NULL,
            [LastName] [nvarchar](50) NOT NULL
        )

        ALTER TABLE {databaseOwner}[{objectQualifier}Users] ADD CONSTRAINT [PK_{objectQualifier}Users] PRIMARY KEY CLUSTERED  ([UserID])
    END
GO

/** Drop Existing Stored Procedures **/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Modules_SetUpFixture]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure {databaseOwner}{objectQualifier}Modules_SetUpFixture
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Modules_GetModules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure {databaseOwner}{objectQualifier}Modules_GetModules
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Modules_TearDownFixture]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure {databaseOwner}{objectQualifier}Modules_TearDownFixture
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Users_GetUsers]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure {databaseOwner}{objectQualifier}Users_GetUsers
GO

/** Create Stored Procedures **/

create procedure {databaseOwner}{objectQualifier}Modules_SetUpFixture

    @ModuleId       int

as
    insert into {objectQualifier}Modules (ModuleId) 
    values (@ModuleId)
GO

create procedure {databaseOwner}{objectQualifier}Modules_GetModules

as

    select ModuleId
    from {objectQualifier}Modules
GO

create procedure {databaseOwner}{objectQualifier}Modules_TearDownFixture

    @ModuleId       int

as
    delete
    from   {objectQualifier}Modules
    where  ModuleId = @ModuleId
GO

create procedure {databaseOwner}{objectQualifier}Users_GetUsers

as

    select UserId
    from {objectQualifier}Users
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/